# abdc<-BcAbundance(lgMtx, metadata, indiv_var, catVar, catVal, color)
#
# nb_val<-length(which(catVal!=""))
# if(color==""){
#   first<-2
#   nb_col_other<-first+nb_val
# }else{
#   first<-3
#   nb_col_other<-first+nb_val
# }
# # Get abundances per column ranging from 0 to 100
# abdc<-abdc[,c(1,2, which(colnames(abdc) %in% c("get(color_var)", catVal)))]
# abdc[,c((first+1):ncol(abdc))]<-apply(abdc[,c((first+1):ncol(abdc))], 2, function(x) x/sum(x)*100)
# abdc[is.na(abdc)]<-0
# # Sum all not wanted columns into one called "other"
# abdc_norm<-abdc
#
# # Delete barcodes with total abundance of 0
# abdc_norm<-abdc_norm[which(rowSums(abdc_norm[,(first+1):ncol(abdc_norm)])>0),]
# # tot abundances per barcode
# abdc_norm$abondances<-rowSums(abdc_norm[,(first+1):ncol(abdc_norm)])
# ## Convert barcode abundances in each cell type in % in each cell type:
# abdc_norm<-normByAbundances(abdc_norm, nb_val)
#
# abdc_norm[is.na(abdc_norm)]<-0
# # Extract only  %age columns
# sub_cat<-abdc_norm[,c((nb_col_other+2):ncol(abdc_norm))] # +2 to exclude abondance column
# # Select ones higher than the threshold
# list_cat<-apply(sub_cat, 1, function(x){ if(any(x>slider)){ res<-which(x>slider)
#                                          }else{ res<-which.max(x)}
#                                         return(names(res))})
#
#
# abdc_norm$categories<-lapply(list_cat, function(x) paste0(x, collapse = "_"))
#
# # Reformat
# abdc_norm$categories<-str_remove_all(abdc_norm$categories, "%_")
# abdc_norm$threshold<-slider
#
# ############ in shiny, different matrix
# #nb_val<-length(catVal)
# if(color==""){
#   first<-2
# }else{
#   first<-3
# }
# nb_col<-first+nb_val
#
# ##### Abundances
# # Sum of bc abundances by individuals & categories
# cellType_abundces<-abdc_norm[,c( (first+1): nb_col)]
#
# catSum<-apply(cellType_abundces, 2,
#               function(abundance) aggregate(data = abdc_norm, abundance~categories+`get(indiv_var)`, sum) )
# # transform catSum from list to df
# catSum<-do.call(rbind.data.frame, catSum)
# # extract initiale value of the category from rownames
# catSum$type_var<-rownames(catSum)
#
# # Reformat to have proper value names
# res<-lapply(rownames(catSum), function(x){str_extract(x, catVal)[which(!is.na(str_extract(x, catVal)))]})
# catSum$type_var<-unlist(res)
# catSum<-catSum[which(catSum$abundance>0),]
# # keep only row where the category is part of the type
# # find in the first column==category (== combinantions of all cell type), the variable (cell type) corresponding
# # because by default all the categories are calculated by cell type
# catSum$keep<-apply(catSum, 1, function(x) is.element(x[4], unlist(str_split(x[1], "_")) ) )
# catSum<-catSum[catSum$keep==TRUE,]
# #catSum$type_var<-as.vector(unlist(catSum$type_var))
#
# # mean of bc abundandces across individuals & categories
# mean_category_abundance<-aggregate(abundance~type_var+categories, data = catSum, mean)
# # sd of bc abundandces across individuals
# mean_category_abundance$sd_abundance<-aggregate(abundance~type_var+categories, data = catSum, sd)[,3]
#
# ##### Number of barcodes
# catSumBis<-apply(cellType_abundces, 2,
#               function(nbBc) aggregate(data = abdc_norm, nbBc~categories+`get(indiv_var)`, length) )
# catSumBis<-do.call(rbind.data.frame, catSumBis)
# catSumBis$type_var<-rownames(catSumBis)
#
# # Reformat to have proper value names
# res<-lapply(rownames(catSumBis), function(x){str_extract(x, catVal)[which(!is.na(str_extract(x, catVal)))]})
# catSumBis$type_var<-unlist(res)
# # keep only row where the category is part of the type
# # find in the first column==category (== combinantions of all cell type), the variable (cell type) corresponding
# # because by default all the categories are calculated by cell type
# catSumBis$keep<-apply(catSumBis, 1, function(x) is.element(x[4], unlist(str_split(x[1], "_")) ) )
# catSumBis<-catSumBis[catSumBis$keep==TRUE,]
# #catSumBis$type_var<-as.vector(unlist(catSumBis$type_var))
# # mean of bc abundandces across individuals & categories
# mean_category_nbBc<-aggregate(nbBc~type_var+categories, data = catSumBis, mean)
# # sd of bc abundandces across individuals
# mean_category_nbBc$sd_nbBc<-aggregate(nbBc~type_var+categories, data = catSumBis, sd)[,3] # when NA == only one indiv has this category
#
# ### Merge abundance and number of barcodes matrices
# category<-merge(mean_category_nbBc, mean_category_abundance, by=c("type_var", "categories"))
# # % per type_var==row of the number of barcode per category
# category$percent_nbBc<-signif(100*with(category, ave(nbBc, type_var, FUN=function(x) x/sum(x))),4)
# category$threshold<-slider
# colnames(category)<-c("Variable","Categories", "Mean_nbBc", "sd_nbBc", "Mean_abundance", "sd_abundance", "percent_nbBc","Threshold")
# category[is.na(category)]<-0
# category<-makeCatgeoryMatrix(matx, metadata, indiv_var, indiv_val, catVar, catVal, slider, condition, conditionVal)
#
# plotCategoryPlot(category, slider, conditionVal, 18) + labs(title = "1 month",
#               subtitle = paste0( slider, "% bias")) + theme(legend.position = 'none')
# #ggsave("images/bias_1m.png", dpi = 300)
conditionVal<-c("03")
category<-MakeCategoryMatrices(matx, metadata, indiv_var, indiv_val, catVar, catVal, slider, condition, conditionVal)[[1]]
countmean<-MakeCategoryMatrices(matx, metadata, indiv_var, indiv_val, catVar, catVal, slider, condition, conditionVal)[[2]]
# get legend
p<-plotCategoryPlot(category, slider, conditionVal, 15)+ labs(title = "3 months",
subtitle = paste0( slider, "% bias"))+ theme(legend.position = 'bottom' )
library(cowplot)
legend <- get_legend(p)
as_ggplot(legend)
#ggsave("images/bias_legend.png", dpi = 300)
plotCategoryPlot(category, slider, conditionVal, 18)+ labs(title = "3 months",
subtitle = paste0( slider, "% bias"))+ theme(legend.position = 'none')
#ggsave("images/bias_3m.png", dpi = 300)
plotCategoryCounts(countmean, slider, 17)
#ggsave("images/bias_3m_bar.png", units="in", dpi=300)
conditionVal<-c("12")
category<-MakeCategoryMatrices(matx, metadata, indiv_var, indiv_val, catVar, catVal, slider, condition, conditionVal)[[1]]
countmean<-MakeCategoryMatrices(matx, metadata, indiv_var, indiv_val, catVar, catVal, slider, condition, conditionVal)[[2]]
plotCategoryPlot(category, slider, conditionVal, 18)+ labs(title = "12 months",
subtitle = paste0( slider, "% bias")) + theme(legend.position = 'none')
#ggsave("images/bias_12m.png", dpi = 300)
plotCategoryCounts(countmean, slider, 17)
#ggsave("images/bias_12m_bar.png", units="in", dpi=300)
matx12<-filter(matx, month=="01")
## parameters
x_var<-c("type")
x_val<-c("Lymphocytes")
y_var<-"type"
y_val<-c("MyeloidCells")
SBtransformation="arcsin"
organism<-"patient"
organismSampleSB<-metadata$patient
colorSB<-"patient"
############# A modifier dans server pour aller avec la nvelle fonction plotDotplot !!!!!!!!!!!!!!!!!!!!
# if color
if(colorSB!="" && colorSB!=organism){
### X axis
x<-getUserSelection(matx12, x_var, x_val, metadata)
### Y axis
y<-getUserSelection(matx12, y_var, y_val, metadata24)
## Step1
# get the matrix as if there were no colors to avoid duplicated dotes
# sum by condition + indiv
x_noColors<-BcAbundance(x,  metadata, organism, x_var, x_val, "")
y_noColors<-BcAbundance(y, metadata, organism, y_var, y_val, "")
# concat variable columns
mincol<-4
### X axis
if(ncol(x_noColors)>mincol) x_noColors<-SumVars(x_noColors, x_val)
### Y axis
if(ncol(y_noColors)>mincol) y_noColors<-SumVars(y_noColors, y_val)
res_withoutcolor<-merge(x_noColors,y_noColors, all = TRUE, by = c("Barcodes", "get(indiv_var)"))
## Step 2
# get color information
x_colors<-BcAbundance(x,  metadata, organism, x_var, x_val, colorSB)
y_colors<-BcAbundance(y, metadata24, organism, y_var, y_val, colorSB)
# concat variable columns
### X axis
if(ncol(x_colors)>mincol) x_colors<-SumVars(x_colors, x_val)
### Y axis
if(ncol(y_colors)>mincol) y_colors<-SumVars(y_colors, y_val)
# reformat color variable
res_color<-merge(x_colors,y_colors, all = TRUE, by = c("Barcodes", "get(indiv_var)", "get(color_var)"))
res_color[is.na(res_color)]<-0
res_color<-aggregate(x=list(color=res_color$`get(color_var)`), by=list(res_color$Barcodes, res_color$`get(indiv_var)`), paste, collapse="_")
colnames(res_color)<-c("Barcodes", "get(indiv_var)", "get(color_var)")
## Step 3
res<-merge(x = res_withoutcolor, res_color, by =c("Barcodes", "get(indiv_var)"), all.x=TRUE)
colnme<-c("Barcodes", organism, names(res)[ncol(res)-2], names(res)[ncol(res)-1], colorSB)
# get selected individuals
res<-res[res$`get(indiv_var)` %in% organismSampleSB, ]
res[is.na(res)]<-0
res<-res[which(rowSums(res[,c(ncol(res)-2,ncol(res)-1)])>0),]
if(SBtransformation=="arcsin (default)"){
res[,c(ncol(res)-2,ncol(res)-1)]<-asinh(res[,c(ncol(res)-2,ncol(res)-1)])
}else if(SBtransformation=="log10(x+1)") {
res[,c(ncol(res)-2,ncol(res)-1)]<-log10(1+res[,c(ncol(res)-2,ncol(res)-1)])
}else{
}
}else{
#no color
### X axis
x<-getUserSelection(matx12, x_var, x_val, metadata)
# sum by condition + indiv
x<-BcAbundance(x,  metadata, organism, x_var, x_val, colorSB)
### Y axis
y<-getUserSelection(matx12, y_var, y_val, metadata)
y<-BcAbundance(y, metadata, organism, y_var, y_val, colorSB)
res<-merge(x,y, all = TRUE, by = c("Barcodes", "get(indiv_var)"))
colnme<-c("Barcodes", organism, names(res)[ncol(res)-1], names(res)[ncol(res)])
# get selected individuals
res<-res[res$`get(indiv_var)` %in% organismSampleSB, ]
res[is.na(res)]<-0
res<-res[which(rowSums(res[,c(ncol(res)-1,ncol(res))])>0),]
if(SBtransformation=="arcsin"){
res[,c(ncol(res)-1,ncol(res))]<-asinh(res[,c(ncol(res)-1,ncol(res))])
}else if(SBtransformation=="log10(x+1)") {
res[,c(ncol(res)-1,ncol(res))]<-log10(1+res[,c(ncol(res)-1,ncol(res))])
}else{
}
}
MakeDotPlotMatrix<-function(matrix, metadata, indivVar, xVar, xVal, yVar, yVal, colorVar){
if(colorVar!="" && colorVar!=organism){
### X axis
x<-getUserSelection(matrix, xVar, xVal, metadata)
### Y axis
y<-getUserSelection(matrix, yVar, yVal, metadata)
## Step1
# get the matrix as if there were no colors to avoid duplicated dotes
# sum by condition + indiv
x_noColors<-BcAbundance(x,  metadata, organism, xVar, xVal, "")
y_noColors<-BcAbundance(y, metadata, organism, yVar, yVal, "")
# concat variable columns
mincol<-4
### X axis
if(ncol(x_noColors)>mincol) x_noColors<-SumVars(x_noColors, xVal)
### Y axis
if(ncol(y_noColors)>mincol) y_noColors<-SumVars(y_noColors, yVal)
res_withoutcolor<-merge(x_noColors,y_noColors, all = TRUE, by = c("Barcodes", "get(indivVar)"))
## Step 2
# get color information
x_colors<-BcAbundance(x,  metadata, organism, xVar, xVal, colorVar)
y_colors<-BcAbundance(y, metadata, organism, yVar, yVal, colorVar)
# concat variable columns
### X axis
if(ncol(x_colors)>mincol) x_colors<-SumVars(x_colors, xVal)
### Y axis
if(ncol(y_colors)>mincol) y_colors<-SumVars(y_colors, yVal)
# reformat color variable
res_color<-merge(x_colors,y_colors, all = TRUE, by = c("Barcodes", "get(indivVar)", "get(colorVar)"))
res_color[is.na(res_color)]<-0
res_color<-aggregate(x=list(color=res_color$`get(colorVar)`), by=list(res_color$Barcodes, res_color$`get(indivVar)`), paste, collapse="_")
colnames(res_color)<-c("Barcodes", "get(indivVar)", "get(colorVar)")
## Step 3
res<-merge(x = res_withoutcolor, res_color, by =c("Barcodes", "get(indivVar)"), all.x=TRUE)
colnme<-c("Barcodes", organism, names(res)[ncol(res)-2], names(res)[ncol(res)-1], colorVar)
# get selected individuals
res<-res[res$`get(indivVar)` %in% organismSampleSB, ]
res[is.na(res)]<-0
res<-res[which(rowSums(res[,c(ncol(res)-2,ncol(res)-1)])>0),]
if(SBtransformation=="arcsin (default)"){
res[,c(ncol(res)-2,ncol(res)-1)]<-asinh(res[,c(ncol(res)-2,ncol(res)-1)])
}else if(SBtransformation=="log10(x+1)") {
res[,c(ncol(res)-2,ncol(res)-1)]<-log10(1+res[,c(ncol(res)-2,ncol(res)-1)])
}else{
}
}else{
#no color
### X axis
x<-getUserSelection(matrix, xVar, xVal, metadata)
# sum by condition + indiv
x<-BcAbundance(x,  metadata, organism, xVar, xVal, colorVar)
### Y axis
y<-getUserSelection(matrix, yVar, yVal, metadata)
y<-BcAbundance(y, metadata, organism, yVar, yVal, colorVar)
res<-merge(x,y, all = TRUE, by = c("Barcodes", "get(indivVar)"))
colnme<-c("Barcodes", organism, names(res)[ncol(res)-1], names(res)[ncol(res)])
# get selected individuals
res<-res[res$`get(indivVar)` %in% organismSampleSB, ]
res[is.na(res)]<-0
res<-res[which(rowSums(res[,c(ncol(res)-1,ncol(res))])>0),]
if(SBtransformation=="arcsin"){
res[,c(ncol(res)-1,ncol(res))]<-asinh(res[,c(ncol(res)-1,ncol(res))])
}else if(SBtransformation=="log10(x+1)") {
res[,c(ncol(res)-1,ncol(res))]<-log10(1+res[,c(ncol(res)-1,ncol(res))])
}else{
}
}
colnames(res)<-colnme
return(res)
}
matx12<-filter(matx, month=="01")
## parameters
x_var<-c("type")
x_val<-c("Lymphocytes")
y_var<-"type"
y_val<-c("MyeloidCells")
SBtransformation="arcsin"
organism<-"patient"
organismSampleSB<-metadata$patient
colorSB<-"patient"
metadata24
MakeDotPlotMatrix<-function(matrix, metadata, indivVar, xVar, xVal, yVar, yVal, colorVar){
if(colorVar!="" && colorVar!=organism){
### X axis
x<-getUserSelection(matrix, xVar, xVal, metadata)
### Y axis
y<-getUserSelection(matrix, yVar, yVal, metadata)
## Step1
# get the matrix as if there were no colors to avoid duplicated dotes
# sum by condition + indiv
x_noColors<-BcAbundance(x,  metadata, organism, xVar, xVal, "")
y_noColors<-BcAbundance(y, metadata, organism, yVar, yVal, "")
# concat variable columns
mincol<-4
### X axis
if(ncol(x_noColors)>mincol) x_noColors<-SumVars(x_noColors, xVal)
### Y axis
if(ncol(y_noColors)>mincol) y_noColors<-SumVars(y_noColors, yVal)
res_withoutcolor<-merge(x_noColors,y_noColors, all = TRUE, by = c("Barcodes", "get(indivVar)"))
## Step 2
# get color information
x_colors<-BcAbundance(x,  metadata, organism, xVar, xVal, colorVar)
y_colors<-BcAbundance(y, metadata, organism, yVar, yVal, colorVar)
# concat variable columns
### X axis
if(ncol(x_colors)>mincol) x_colors<-SumVars(x_colors, xVal)
### Y axis
if(ncol(y_colors)>mincol) y_colors<-SumVars(y_colors, yVal)
# reformat color variable
res_color<-merge(x_colors,y_colors, all = TRUE, by = c("Barcodes", "get(indivVar)", "get(colorVar)"))
res_color[is.na(res_color)]<-0
res_color<-aggregate(x=list(color=res_color$`get(colorVar)`), by=list(res_color$Barcodes, res_color$`get(indivVar)`), paste, collapse="_")
colnames(res_color)<-c("Barcodes", "get(indivVar)", "get(colorVar)")
## Step 3
res<-merge(x = res_withoutcolor, res_color, by =c("Barcodes", "get(indivVar)"), all.x=TRUE)
colnme<-c("Barcodes", organism, names(res)[ncol(res)-2], names(res)[ncol(res)-1], colorVar)
# get selected individuals
res<-res[res$`get(indivVar)` %in% organismSampleSB, ]
res[is.na(res)]<-0
res<-res[which(rowSums(res[,c(ncol(res)-2,ncol(res)-1)])>0),]
if(SBtransformation=="arcsin (default)"){
res[,c(ncol(res)-2,ncol(res)-1)]<-asinh(res[,c(ncol(res)-2,ncol(res)-1)])
}else if(SBtransformation=="log10(x+1)") {
res[,c(ncol(res)-2,ncol(res)-1)]<-log10(1+res[,c(ncol(res)-2,ncol(res)-1)])
}else{
}
}else{
#no color
### X axis
x<-getUserSelection(matrix, xVar, xVal, metadata)
# sum by condition + indiv
x<-BcAbundance(x,  metadata, organism, xVar, xVal, colorVar)
### Y axis
y<-getUserSelection(matrix, yVar, yVal, metadata)
y<-BcAbundance(y, metadata, organism, yVar, yVal, colorVar)
res<-merge(x,y, all = TRUE, by = c("Barcodes", "get(indivVar)"))
colnme<-c("Barcodes", organism, names(res)[ncol(res)-1], names(res)[ncol(res)])
# get selected individuals
res<-res[res$`get(indivVar)` %in% organismSampleSB, ]
res[is.na(res)]<-0
res<-res[which(rowSums(res[,c(ncol(res)-1,ncol(res))])>0),]
if(SBtransformation=="arcsin"){
res[,c(ncol(res)-1,ncol(res))]<-asinh(res[,c(ncol(res)-1,ncol(res))])
}else if(SBtransformation=="log10(x+1)") {
res[,c(ncol(res)-1,ncol(res))]<-log10(1+res[,c(ncol(res)-1,ncol(res))])
}else{
}
}
colnames(res)<-colnme
return(res)
}
matx12<-filter(matx, month=="01")
## parameters
x_var<-c("type")
x_val<-c("Lymphocytes")
y_var<-"type"
y_val<-c("MyeloidCells")
SBtransformation="arcsin"
organism<-"patient"
organismSampleSB<-metadata$patient
colorSB<-"patient"
MakeDotPlotMatrix(matx12, metadata, organism, x_var, x_val,y_var, y_val, colorSB)
############# A modifier dans server pour aller avec la nvelle fonction plotDotplot !!!!!!!!!!!!!!!!!!!!
# if color
if(colorSB!="" && colorSB!=organism){
### X axis
x<-getUserSelection(matx12, x_var, x_val, metadata)
### Y axis
y<-getUserSelection(matx12, y_var, y_val, metadata)
## Step1
# get the matrix as if there were no colors to avoid duplicated dotes
# sum by condition + indiv
x_noColors<-BcAbundance(x,  metadata, organism, x_var, x_val, "")
y_noColors<-BcAbundance(y, metadata, organism, y_var, y_val, "")
# concat variable columns
mincol<-4
### X axis
if(ncol(x_noColors)>mincol) x_noColors<-SumVars(x_noColors, x_val)
### Y axis
if(ncol(y_noColors)>mincol) y_noColors<-SumVars(y_noColors, y_val)
res_withoutcolor<-merge(x_noColors,y_noColors, all = TRUE, by = c("Barcodes", "get(indiv_var)"))
## Step 2
# get color information
x_colors<-BcAbundance(x,  metadata, organism, x_var, x_val, colorSB)
y_colors<-BcAbundance(y, metadata, organism, y_var, y_val, colorSB)
# concat variable columns
### X axis
if(ncol(x_colors)>mincol) x_colors<-SumVars(x_colors, x_val)
### Y axis
if(ncol(y_colors)>mincol) y_colors<-SumVars(y_colors, y_val)
# reformat color variable
res_color<-merge(x_colors,y_colors, all = TRUE, by = c("Barcodes", "get(indiv_var)", "get(color_var)"))
res_color[is.na(res_color)]<-0
res_color<-aggregate(x=list(color=res_color$`get(color_var)`), by=list(res_color$Barcodes, res_color$`get(indiv_var)`), paste, collapse="_")
colnames(res_color)<-c("Barcodes", "get(indiv_var)", "get(color_var)")
## Step 3
res<-merge(x = res_withoutcolor, res_color, by =c("Barcodes", "get(indiv_var)"), all.x=TRUE)
colnme<-c("Barcodes", organism, names(res)[ncol(res)-2], names(res)[ncol(res)-1], colorSB)
# get selected individuals
res<-res[res$`get(indiv_var)` %in% organismSampleSB, ]
res[is.na(res)]<-0
res<-res[which(rowSums(res[,c(ncol(res)-2,ncol(res)-1)])>0),]
if(SBtransformation=="arcsin (default)"){
res[,c(ncol(res)-2,ncol(res)-1)]<-asinh(res[,c(ncol(res)-2,ncol(res)-1)])
}else if(SBtransformation=="log10(x+1)") {
res[,c(ncol(res)-2,ncol(res)-1)]<-log10(1+res[,c(ncol(res)-2,ncol(res)-1)])
}else{
}
}else{
#no color
### X axis
x<-getUserSelection(matx12, x_var, x_val, metadata)
# sum by condition + indiv
x<-BcAbundance(x,  metadata, organism, x_var, x_val, colorSB)
### Y axis
y<-getUserSelection(matx12, y_var, y_val, metadata)
y<-BcAbundance(y, metadata, organism, y_var, y_val, colorSB)
res<-merge(x,y, all = TRUE, by = c("Barcodes", "get(indiv_var)"))
colnme<-c("Barcodes", organism, names(res)[ncol(res)-1], names(res)[ncol(res)])
# get selected individuals
res<-res[res$`get(indiv_var)` %in% organismSampleSB, ]
res[is.na(res)]<-0
res<-res[which(rowSums(res[,c(ncol(res)-1,ncol(res))])>0),]
if(SBtransformation=="arcsin"){
res[,c(ncol(res)-1,ncol(res))]<-asinh(res[,c(ncol(res)-1,ncol(res))])
}else if(SBtransformation=="log10(x+1)") {
res[,c(ncol(res)-1,ncol(res))]<-log10(1+res[,c(ncol(res)-1,ncol(res))])
}else{
}
}
############# A modifier dans server pour aller avec la nvelle fonction plotDotplot !!!!!!!!!!!!!!!!!!!!
# if color
if(colorSB!="" && colorSB!=organism){
### X axis
x<-getUserSelection(matx12, x_var, x_val, metadata)
### Y axis
y<-getUserSelection(matx12, y_var, y_val, metadata)
## Step1
# get the matrix as if there were no colors to avoid duplicated dotes
# sum by condition + indiv
x_noColors<-BcAbundance(x,  metadata, organism, x_var, x_val, "")
y_noColors<-BcAbundance(y, metadata, organism, y_var, y_val, "")
# concat variable columns
mincol<-4
### X axis
if(ncol(x_noColors)>mincol) x_noColors<-SumVars(x_noColors, x_val)
### Y axis
if(ncol(y_noColors)>mincol) y_noColors<-SumVars(y_noColors, y_val)
res_withoutcolor<-merge(x_noColors,y_noColors, all = TRUE, by = c("Barcodes", "get(indivVar)"))
## Step 2
# get color information
x_colors<-BcAbundance(x,  metadata, organism, x_var, x_val, colorSB)
y_colors<-BcAbundance(y, metadata, organism, y_var, y_val, colorSB)
# concat variable columns
### X axis
if(ncol(x_colors)>mincol) x_colors<-SumVars(x_colors, x_val)
### Y axis
if(ncol(y_colors)>mincol) y_colors<-SumVars(y_colors, y_val)
# reformat color variable
res_color<-merge(x_colors,y_colors, all = TRUE, by = c("Barcodes", "get(indivVar)", "get(colorVar)"))
res_color[is.na(res_color)]<-0
res_color<-aggregate(x=list(color=res_color$`get(colorVar)`), by=list(res_color$Barcodes, res_color$`get(indivVar)`), paste, collapse="_")
colnames(res_color)<-c("Barcodes", "get(indivVar)", "get(colorVar)")
## Step 3
res<-merge(x = res_withoutcolor, res_color, by =c("Barcodes", "get(indivVar)"), all.x=TRUE)
colnme<-c("Barcodes", organism, names(res)[ncol(res)-2], names(res)[ncol(res)-1], colorSB)
# get selected individuals
res<-res[res$`get(indivVar)` %in% organismSampleSB, ]
res[is.na(res)]<-0
res<-res[which(rowSums(res[,c(ncol(res)-2,ncol(res)-1)])>0),]
if(SBtransformation=="arcsin (default)"){
res[,c(ncol(res)-2,ncol(res)-1)]<-asinh(res[,c(ncol(res)-2,ncol(res)-1)])
}else if(SBtransformation=="log10(x+1)") {
res[,c(ncol(res)-2,ncol(res)-1)]<-log10(1+res[,c(ncol(res)-2,ncol(res)-1)])
}else{
}
}else{
#no color
### X axis
x<-getUserSelection(matx12, x_var, x_val, metadata)
# sum by condition + indiv
x<-BcAbundance(x,  metadata, organism, x_var, x_val, colorSB)
### Y axis
y<-getUserSelection(matx12, y_var, y_val, metadata)
y<-BcAbundance(y, metadata, organism, y_var, y_val, colorSB)
res<-merge(x,y, all = TRUE, by = c("Barcodes", "get(indivVar)"))
colnme<-c("Barcodes", organism, names(res)[ncol(res)-1], names(res)[ncol(res)])
# get selected individuals
res<-res[res$`get(indivVar)` %in% organismSampleSB, ]
res[is.na(res)]<-0
res<-res[which(rowSums(res[,c(ncol(res)-1,ncol(res))])>0),]
if(SBtransformation=="arcsin"){
res[,c(ncol(res)-1,ncol(res))]<-asinh(res[,c(ncol(res)-1,ncol(res))])
}else if(SBtransformation=="log10(x+1)") {
res[,c(ncol(res)-1,ncol(res))]<-log10(1+res[,c(ncol(res)-1,ncol(res))])
}else{
}
}
colnames(res)<-colnme
res
matx12<-filter(matx, month=="01")
res<-MakeDotPlotMatrix(matx12, metadata, organism, x_var, x_val,y_var, y_val, colorSB)
plotDotplot(res, organism, colorSB, SBtransformation, textSize = 15) + ggtitle("1 month")
#ggsave("images/dotplot_1month.png", dpi = 300)
